name: CI (SwiftLint + SwiftPM Build/Test + iOS App Build/Test)

on:
  push:
    branches: [ main, develop ]
  pull_request:

env:
  # Xcode固定（Xcode_16.4 が無い場合は 16.* を選ぶ手順に変えてください）
  DEVELOPER_DIR: /Applications/Xcode_16.4.app

  WORKSPACE_PATH: APIClientSample.xcworkspace
  APP_SCHEME: APIClientSample

  # SPM クローン先を固定してキャッシュ対象にする
  SPM_CLONE_DIR: SourcePackages

jobs:
  build-test:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Xcode固定（xcode-select 方式）
      - name: Select Xcode
        run: sudo xcode-select -s "${DEVELOPER_DIR}/Contents/Developer"

      - name: Show Xcode version
        run: xcodebuild -version

      # ----（任意）SwiftLint：速さ優先なら外してOK ----
      - name: Install tools (xcbeautify, swiftlint)
        run: |
          brew install xcbeautify || true
          brew install swiftlint || true
      - name: SwiftLint (repo root)
        run: swiftlint --strict || true

      # ---- SPM キャッシュ（Xcode のクローン先を固定）----
      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: ${{ env.SPM_CLONE_DIR }}
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # 依存解決を先にやる（再ビルドを減らす）
      - name: Resolve Packages
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -clonedSourcePackagesDirPath "$SPM_CLONE_DIR" \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -resolvePackageDependencies

      # テスト実行（見やすいログ＋結果バンドル保存）
      - name: Test (pretty log + result bundle)
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -destination "platform=iOS Simulator,OS=latest,name=iPhone 16 Pro" \
            -clonedSourcePackagesDirPath "$SPM_CLONE_DIR" \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -resultBundlePath "$RUNNER_TEMP/TestResults.xcresult" \
            test \
          | tee "$RUNNER_TEMP/xcodebuild-raw.log" \
          | xcbeautify --is-ci

      #（任意）ビルド時間サマリ
      - name: Build timing summary
        if: always()
        run: |
          xcodebuild -showBuildTimingSummary \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" || true

      # 失敗時の成果物
      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-artifacts
          path: |
            $RUNNER_TEMP/TestResults.xcresult
            $RUNNER_TEMP/xcodebuild-raw.log
