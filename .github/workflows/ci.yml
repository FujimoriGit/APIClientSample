name: CI (SwiftLint + SwiftPM Build/Test + iOS App Build/Test)

on:
  push:
    branches: [ main, develop ]
  pull_request:

env:
  WORKSPACE_PATH: APIClientSample.xcworkspace
  APP_SCHEME: APIClientSample

  # SPM クローン先を固定（キャッシュ対象）
  SPM_CLONE_DIR: SourcePackages

  # 速度寄せのビルドフラグ（副作用ほぼ無し）
  XCODE_FLAGS: >
    COMPILER_INDEX_STORE_ENABLE=NO
    CLANG_ENABLE_CODE_COVERAGE=NO
    DEBUG_INFORMATION_FORMAT=dwarf
    ONLY_ACTIVE_ARCH=YES
    SWIFT_COMPILATION_MODE=wholemodule

jobs:
  build-test:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      # ツール導入（brew updateしない）
      - name: Install xcbeautify (and swiftlint optional)
        run: |
          brew install xcbeautify || true
          # brew install swiftlint || true   # 必要ならコメント解除

      # ---- SPM キャッシュ（Xcode の clone 先を固定）----
      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: ${{ env.SPM_CLONE_DIR }}
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # 依存解決を先に行う（テスト中の再解決を避ける）
      - name: Resolve Packages
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -clonedSourcePackagesDirPath "$SPM_CLONE_DIR" \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -resolvePackageDependencies \
          | xcbeautify --is-ci

      # 1回だけビルド（テスト用）
      - name: Build for testing
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -destination "platform=iOS Simulator,OS=latest,name=iPhone 16 Pro" \
            -derivedDataPath "$RUNNER_TEMP/DerivedData" \
            -clonedSourcePackagesDirPath "$SPM_CLONE_DIR" \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -destination-timeout 60 \
            -parallel-testing-enabled YES \
            $XCODE_FLAGS \
            build-for-testing \
          | xcbeautify --is-ci

      # ビルド済みを使って高速実行
      - name: Test without building
        run: |
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -destination "platform=iOS Simulator,OS=latest,name=iPhone 16 Pro" \
            -derivedDataPath "$RUNNER_TEMP/DerivedData" \
            -resultBundlePath "$RUNNER_TEMP/TestResults.xcresult" \
            -parallel-testing-enabled YES \
            -maximum-concurrent-test-simulator-destinations 2 \
            -destination-timeout 60 \
            $XCODE_FLAGS \
            test-without-building \
          | tee "$RUNNER_TEMP/xcodebuild-raw.log" \
          | xcbeautify --is-ci

      # （任意）どこが重いか把握
      - name: Build timing summary
        if: always()
        run: |
          xcodebuild -showBuildTimingSummary \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" || true

      # 失敗時の調査用成果物
      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-artifacts
          path: |
            $RUNNER_TEMP/TestResults.xcresult
            $RUNNER_TEMP/xcodebuild-raw.log
            $RUNNER_TEMP/DerivedData/Logs
