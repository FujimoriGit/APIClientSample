name: CI (SwiftLint + SwiftPM Build/Test + iOS App Build/Test)

on:
  push:
    branches: [ main, develop ]
  pull_request:

env:
  WORKSPACE_PATH: APIClientSample.xcworkspace
  APP_SCHEME: APIClientSample
  PACKAGE_DIR: APIModule
  IOS_SIM_NAME: "iPhone 16 Pro"
  IOS_SIM_OS: "latest"
  DERIVED_DATA: ${{ github.workspace }}/.derivedData
  RESULT_BUNDLE: ${{ runner.temp }}/TestResults.xcresult

jobs:
  lint-build-test:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
            xcode-version: '16.*'

      # ---------- SwiftLint ----------
      - name: Install tools (SwiftLint & xcbeautify)
        run: |
          brew update
          brew install swiftlint xcbeautify

      - name: SwiftLint (repo root)
        run: swiftlint --strict

      - name: SwiftLint (APIModule package)
        run: swiftlint --strict "$PACKAGE_DIR"

      - name: SwiftLint (App, if exists)
        run: |
          if [ -d "App" ]; then swiftlint --strict App; fi

      # ---------- Caches ----------
      - name: Cache SwiftPM / DerivedData
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}

      # ---------- Swift Package: Build & Test ----------
      - name: Swift Package - Resolve
        working-directory: ${{ env.PACKAGE_DIR }}
        run: swift package resolve

      - name: Swift Package - Test
        working-directory: ${{ env.PACKAGE_DIR }}
        run: swift test -v

      # ---------- iOS App: Build & Test (Simulator) ----------
      - name: Show Xcode version
        run: xcodebuild -version

      - name: List schemes (debug)
        run: xcodebuild -list -workspace "$WORKSPACE_PATH" || true

      - name: Create & Boot Simulator
        shell: bash
        run: |
          set -euo pipefail
          DEVICE_ID=$(xcrun simctl list devices available | awk -v n="$IOS_SIM_NAME" -F '[()]' '$0 ~ n {print $2; exit}')
          if [ -z "${DEVICE_ID:-}" ]; then
            DEVICE_ID=$(xcrun simctl create "$IOS_SIM_NAME" "com.apple.CoreSimulator.SimDeviceType.$(echo "$IOS_SIM_NAME" | tr ' ' '-') " "com.apple.CoreSimulator.SimRuntime.iOS-${IOS_SIM_OS//./-}")
          fi
          xcrun simctl boot "${DEVICE_ID}" || true
          xcrun simctl bootstatus "${DEVICE_ID}" -b -T 120

      - name: Test App (Debug, pretty log + result bundle)
        shell: bash
        run: |
          set -euo pipefail
          # ログ整形しつつ、失敗時も生ログを残す
          xcodebuild \
            -workspace "$WORKSPACE_PATH" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -destination "platform=iOS Simulator,name=${IOS_SIM_NAME},OS=${IOS_SIM_OS}" \
            -derivedDataPath "$DERIVED_DATA" \
            -skipPackagePluginValidation \
            -parallel-testing-enabled YES \
            -maximum-concurrent-test-simulator-destinations 2 \
            -resultBundlePath "$RESULT_BUNDLE" \
            test \
          | tee $RUNNER_TEMP/xcodebuild-raw.log \
          | xcbeautify --is-ci

      - name: Build timing summary
        if: always()
        run: |
            xcodebuild -showBuildTimingSummary \
              -workspace "$WORKSPACE_PATH" \
              -scheme "$APP_SCHEME" \
              -configuration Debug \
              -derivedDataPath "$DERIVED_DATA" || true

      # ---------- Artifacts ----------
      - name: Upload xcresult and logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-artifacts
          path: |
            ${{ env.RESULT_BUNDLE }}
            ${{ env.DERIVED_DATA }}/Logs
            $RUNNER_TEMP/xcodebuild-raw.log
            ~/Library/Logs/DiagnosticReports
            ~/Library/Logs/CoreSimulator
